import logging
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters, 
    CallbackContext, ConversationHandler, CallbackQueryHandler
)
from apscheduler.schedulers.background import BackgroundScheduler
from dotenv import load_dotenv
import pytz
import sqlite3
import types

from database import Database
from utils import (
    parse_time_input, format_progress_message, format_notification_message,
    format_time_record, format_time, format_money, parse_timer_message,
    create_progress_chart
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    RATE, GOAL, 
    ADD_TIME, CONFIRM_TIME, 
    CHANGE_RATE, CHANGE_GOAL, CHANGE_NOTIFY,
    RESET_GOAL_CONFIRM
) = range(8)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = BackgroundScheduler()
scheduler.start()


def send_notification(context: CallbackContext, user_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    progress = db.get_progress(user_id)
    if progress:
        message = format_notification_message(progress)
        context.bot.send_message(chat_id=user_id, text=message)


def setup_notification(context: CallbackContext, user_id, freq):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for job in scheduler.get_jobs():
        if job.id == f"notify_{user_id}":
            job.remove()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    if freq == 'hour':
        scheduler.add_job(
            send_notification, 'interval', hours=1, id=f"notify_{user_id}",
            args=(context, user_id), timezone=pytz.UTC
        )
    elif freq == 'day':
        scheduler.add_job(
            send_notification, 'interval', days=1, id=f"notify_{user_id}",
            args=(context, user_id), timezone=pytz.UTC
        )
    elif freq == 'week':
        scheduler.add_job(
            send_notification, 'interval', weeks=1, id=f"notify_{user_id}",
            args=(context, user_id), timezone=pytz.UTC
        )


# –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
def start(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if db.user_exists(user_id):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        show_main_menu(update, context)
        return ConversationHandler.END
    
    # –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é –ø–æ—á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500‚ÇΩ):"
    )
    
    return RATE


def rate_input(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏"""
    user_id = update.effective_user.id
    user_input = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['state'] = RATE
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–≤–æ–¥ —Å—Ç–∞–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{user_input}'")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
    try:
        # –û—á–∏—â–∞–µ–º –≤–≤–æ–¥ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        rate_text = user_input.replace('‚ÇΩ', '').replace('—Ä', '').replace('—Ä—É–±', '')
        rate_text = rate_text.replace(',', '.').strip()
        
        logger.info(f"–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞–≤–∫–∏: '{rate_text}'")
        
        rate = float(rate_text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['rate'] = rate
        logger.info(f"–°—Ç–∞–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {rate}")
        
        update.message.reply_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –ø–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {rate:.0f}‚ÇΩ\n\n"
            f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –∑–∞—Ä–∞–±–æ—Ç–∫–∞:"
        )
        
        return GOAL
    
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞–≤–∫–∏: {e}")
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 500 –∏–ª–∏ 500‚ÇΩ"
        )
        
        return RATE


def goal_input(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞"""
    user_id = update.effective_user.id
    user_input = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['state'] = GOAL
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–≤–æ–¥ —Ü–µ–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{user_input}'")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–∏
    try:
        # –û—á–∏—â–∞–µ–º –≤–≤–æ–¥ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        goal_text = user_input.replace('‚ÇΩ', '').replace('—Ä', '').replace('—Ä—É–±', '')
        goal_text = goal_text.replace(',', '.').strip()
        
        logger.info(f"–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏: '{goal_text}'")
        
        goal = float(goal_text)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        rate = context.user_data.get('rate')
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞–≤–∫–∞: {rate}")
        
        if rate is None:
            update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start"
            )
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            db.add_user(user_id, rate, goal)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")
            update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return ConversationHandler.END
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ–∂–µ–¥–Ω–µ–≤–Ω–æ)
        try:
            setup_notification(context, user_id, 'day')
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        
        update.message.reply_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ —Ü–µ–ª—å –∑–∞—Ä–∞–±–æ—Ç–∫–∞: {goal:.0f}‚ÇΩ\n\n"
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏."
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        show_main_menu(update, context)
        
        return ConversationHandler.END
    
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ü–µ–ª–∏: {e}")
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ü–µ–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 50000 –∏–ª–∏ 50000‚ÇΩ"
        )
        
        return GOAL


def show_main_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    progress = db.get_progress(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏
    user_data = db.get_user_data(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ–Ω—é
    if progress and user_data:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —á–∞—Å–æ–≤
        total_hours = db.get_total_hours(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–±—Ä–æ—à–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–µ—Å–ª–∏ earned = 0, –Ω–æ –µ—Å—Ç—å —á–∞—Å—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ earned)
        if progress['earned'] == 0 and total_hours > 0:
            menu_text = (
                f"üéØ –¶–µ–ª—å: {format_money(progress['goal'])}\n"
                f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_money(progress['earned'])} ({progress['percent']}%)\n"
                f"\n"
                f"‚åõ –û—Å—Ç–∞–ª–æ—Å—å: {progress['hours_left']:.1f}—á\n"
                f"üíµ –°—Ç–∞–≤–∫–∞: {format_money(user_data['rate'])}/—á–∞—Å\n"
                f"\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
        else:
            menu_text = (
                f"üéØ –¶–µ–ª—å: {format_money(progress['goal'])}\n"
                f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_money(progress['earned'])} ({progress['percent']}%)\n"
                f"\n"
                f"‚è±Ô∏è –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_hours:.1f}—á\n"
                f"‚åõ –û—Å—Ç–∞–ª–æ—Å—å: {progress['hours_left']:.1f}—á\n"
                f"üíµ –°—Ç–∞–≤–∫–∞: {format_money(user_data['rate'])}/—á–∞—Å\n"
                f"\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
    else:
        menu_text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è", callback_data='add_time'),
            InlineKeyboardButton("–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data='progress')
        ],
        [
            InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è", callback_data='history'),
            InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ)
    message = None
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if 'last_bot_message' in context.user_data:
            try:
                chat_id, message_id = context.user_data['last_bot_message']
                context.bot.delete_message(chat_id=chat_id, message_id=message_id)
                logger.info(f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {message_id}")
                # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                del context.user_data['last_bot_message']
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
                # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                del context.user_data['last_bot_message']
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if update.callback_query and update.callback_query.message:
            chat_id = update.callback_query.message.chat_id
            message = context.bot.send_message(
                chat_id=chat_id,
                text=menu_text,
                reply_markup=reply_markup
            )
        elif update.message:
            message = update.message.reply_text(
                text=menu_text,
                reply_markup=reply_markup
            )
        else:
            # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            chat_id = context.user_data.get('user_chat_id')
            if chat_id:
                message = context.bot.send_message(
                    chat_id=chat_id,
                    text=menu_text,
                    reply_markup=reply_markup
                )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        if message:
            context.user_data['last_bot_message'] = (message.chat_id, message.message_id)
            context.user_data['user_chat_id'] = message.chat_id
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–µ
        try:
            if update.callback_query and update.callback_query.message:
                update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
            elif update.message:
                update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
        except:
            pass


def button_callback(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    try:
        query.answer()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback_query: {e}")
    
    data = query.data
    chat_id = query.message.chat_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data['user_chat_id'] = chat_id
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    if data == 'main_menu':
        show_main_menu(update, context)
        return ConversationHandler.END
    
    elif data == 'add_time':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        keyboard = [
            [
                InlineKeyboardButton("15 –º–∏–Ω", callback_data='time_15'),
                InlineKeyboardButton("30 –º–∏–Ω", callback_data='time_30')
            ],
            [
                InlineKeyboardButton("1 —á–∞—Å", callback_data='time_60'),
                InlineKeyboardButton("2 —á–∞—Å–∞", callback_data='time_120')
            ],
            [
                InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data='time_manual')
            ],
            [
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='main_menu')
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                query.message.delete()
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                
            message = context.bot.send_message(
                chat_id=chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
                reply_markup=reply_markup
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            if message:
                context.user_data['last_bot_message'] = (message.chat_id, message.message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
            show_main_menu(update, context)
            return ConversationHandler.END
        
        return ADD_TIME
    
    elif data.startswith('time_'):
        if data == 'time_manual':
            try:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                try:
                    query.message.delete()
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                    
                message = context.bot.send_message(
                    chat_id=chat_id,
                    text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                    "‚Ä¢ 2—á 20–º\n"
                    "‚Ä¢ 140–º–∏–Ω\n"
                    "‚Ä¢ 2.33 (—á–∞—Å—ã)"
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                if message:
                    context.user_data['last_bot_message'] = (message.chat_id, message.message_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                show_main_menu(update, context)
                return ConversationHandler.END
                
            return CONFIRM_TIME
        else:
            # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω—É—Ç—ã –∏–∑ data (–Ω–∞–ø—Ä–∏–º–µ—Ä, time_15 -> 15 –º–∏–Ω—É—Ç)
            minutes = int(data.split('_')[1])
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = db.get_user_data(user_id)
                if not user_data:
                    context.bot.send_message(
                        chat_id=chat_id,
                        text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
                    )
                    return ConversationHandler.END
                    
                rate = user_data['rate']
                
                # –†–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞
                earnings = (minutes / 60) * rate
                
                # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                keyboard = [
                    [
                        InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f'confirm_{minutes}'),
                        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='add_time')
                    ]
                ]
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                try:
                    query.message.delete()
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                    
                message = context.bot.send_message(
                    chat_id=chat_id,
                    text=f"–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å: {format_time(minutes)}\n"
                    f"–ó–∞—Ä–∞–±–æ—Ç–æ–∫: {format_money(earnings)}\n\n"
                    f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:",
                    reply_markup=reply_markup
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                if message:
                    context.user_data['last_bot_message'] = (message.chat_id, message.message_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∞: {e}")
                context.bot.send_message(
                    chat_id=chat_id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                show_main_menu(update, context)
                return ConversationHandler.END
                
            return CONFIRM_TIME
    
    elif data.startswith('confirm_'):
        # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω—É—Ç—ã –∏–∑ data (–Ω–∞–ø—Ä–∏–º–µ—Ä, confirm_15 -> 15 –º–∏–Ω—É—Ç)
        minutes = int(data.split('_')[1])
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            earnings = db.add_time_record(user_id, minutes)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            try:
                query.message.delete()
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            message = query.message.reply_text(
                f"‚úÖ\n–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ: {format_time(minutes)}\n"
                f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_money(earnings)}"
            )
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            context.job_queue.run_once(
                delete_message_later, 
                5, 
                context=(message.chat_id, message.message_id)
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            show_main_menu(update, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
            try:
                query.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
            except:
                pass
        
        return ConversationHandler.END
    
    elif data == 'progress':
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        progress = db.get_progress(user_id)
        
        if progress:
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            chart_buf = create_progress_chart(progress)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –∫–∞–∫ —Ñ–æ—Ç–æ
            query.message.reply_photo(
                photo=chart_buf,
                caption=f"–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress['percent']}% –æ—Ç —Ü–µ–ª–∏"
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            show_main_menu(update, context)
        else:
            query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ."
            )
    
    elif data == 'history':
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø–∏—Å–µ–π
        try:
            records = db.get_time_history(user_id)
            
            if records:
                message_text = "üìã –ò—Å—Ç–æ—Ä–∏—è:\n\n"
                for record in records:
                    message_text += format_time_record(record) + "\n"
            else:
                message_text = "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."
            
            keyboard = [
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='main_menu')]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                query.message.delete()
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                
            message = context.bot.send_message(
                chat_id=chat_id,
                text=message_text,
                reply_markup=reply_markup
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            if message:
                context.user_data['last_bot_message'] = (message.chat_id, message.message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            context.bot.send_message(
                chat_id=chat_id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            show_main_menu(update, context)
    
    elif data == 'settings':
        # –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        try:
            keyboard = [
                [
                    InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data='change_rate'),
                    InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å", callback_data='change_goal')
                ],
                [
                    InlineKeyboardButton("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='notifications'),
                    InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data='reset_goal')
                ],
                [
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='main_menu')
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                query.message.delete()
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                
            message = context.bot.send_message(
                chat_id=chat_id,
                text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=reply_markup
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            if message:
                context.user_data['last_bot_message'] = (message.chat_id, message.message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            show_main_menu(update, context)
    
    elif data == 'change_rate':
        # –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data['state'] = CHANGE_RATE
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CHANGE_RATE –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                query.message.delete()
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                
            message = context.bot.send_message(
                chat_id=chat_id,
                text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ—á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É:"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            if message:
                context.user_data['last_bot_message'] = (message.chat_id, message.message_id)
                
            return CHANGE_RATE
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏: {e}")
            show_main_menu(update, context)
            return ConversationHandler.END
    
    elif data == 'change_goal':
        # –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π —Ü–µ–ª–∏
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data['state'] = CHANGE_GOAL
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CHANGE_GOAL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                query.message.delete()
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                
            message = context.bot.send_message(
                chat_id=chat_id,
                text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å –∑–∞—Ä–∞–±–æ—Ç–∫–∞:"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            if message:
                context.user_data['last_bot_message'] = (message.chat_id, message.message_id)
                
            return CHANGE_GOAL
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏: {e}")
            show_main_menu(update, context)
            return ConversationHandler.END
    
    elif data == 'notifications':
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        try:
            keyboard = [
                [
                    InlineKeyboardButton("–ö–∞–∂–¥—ã–π —á–∞—Å", callback_data='notify_hour'),
                    InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data='notify_day')
                ],
                [
                    InlineKeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data='notify_week'),
                    InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å", callback_data='notify_off')
                ],
                [
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='settings')
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                query.message.delete()
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                
            message = context.bot.send_message(
                chat_id=chat_id,
                text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
                reply_markup=reply_markup
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            if message:
                context.user_data['last_bot_message'] = (message.chat_id, message.message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            show_main_menu(update, context)
    
    elif data.startswith('notify_'):
        freq = data.split('_')[1]
        
        try:
            if freq == 'off':
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                for job in scheduler.get_jobs():
                    if job.id == f"notify_{user_id}":
                        job.remove()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                db.update_notify_freq(user_id, 'off')
                
                freq_text = "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            else:
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
                setup_notification(context, user_id, freq)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                db.update_notify_freq(user_id, freq)
                
                freq_text = {
                    'hour': '–µ–∂–µ—á–∞—Å–Ω–æ',
                    'day': '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ',
                    'week': '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'
                }.get(freq, freq)
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                query.message.delete()
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            keyboard = [
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='settings')]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            message = context.bot.send_message(
                chat_id=chat_id,
                text=f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å {freq_text}.",
                reply_markup=reply_markup
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            if message:
                context.user_data['last_bot_message'] = (message.chat_id, message.message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            context.bot.send_message(
                chat_id=chat_id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            show_main_menu(update, context)
    
    elif data.startswith('timer_confirm_'):
        # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω—É—Ç—ã –∏–∑ data
        minutes = int(data.split('_')[2])
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            earnings = db.add_time_record(user_id, minutes)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            try:
                query.message.delete()
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            message = query.message.reply_text(
                f"‚úÖ –í—Ä–µ–º—è –∏–∑ —Ç–∞–π–º–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {format_time(minutes)}\n"
                f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_money(earnings)}"
            )
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            context.job_queue.run_once(
                delete_message_later, 
                5, 
                context=(message.chat_id, message.message_id)
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            show_main_menu(update, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞: {e}")
            try:
                query.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
            except:
                pass
            
        return ConversationHandler.END
    
    elif data.startswith('timer_group_confirm_'):
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –∏–∑ data
        minutes = int(data.split('_')[3])
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            earnings = db.add_time_record(user_id, minutes)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            try:
                query.message.delete()
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            message = query.message.reply_text(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—â–µ–µ –≤—Ä–µ–º—è –∏–∑ —Ç–∞–π–º–µ—Ä–æ–≤: {format_time(minutes)}\n"
                f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_money(earnings)}"
            )
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            context.job_queue.run_once(
                delete_message_later, 
                5, 
                context=(message.chat_id, message.message_id)
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            show_main_menu(update, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã —Ç–∞–π–º–µ—Ä–æ–≤: {e}")
            try:
                query.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
            except:
                pass
            
        return ConversationHandler.END
    
    elif data == 'timer_cancel':
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            try:
                query.message.delete()
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–º–µ–Ω–æ–π
            message = query.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            context.job_queue.run_once(
                delete_message_later, 
                5, 
                context=(message.chat_id, message.message_id)
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            show_main_menu(update, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–º–µ–Ω—ã —Ç–∞–π–º–µ—Ä–∞: {e}")
        
        return ConversationHandler.END
    
    elif data == 'reset_goal':
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ —Ü–µ–ª–∏
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            progress = db.get_progress(user_id)
            
            if not progress:
                context.bot.send_message(
                    chat_id=chat_id,
                    text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
                )
                return ConversationHandler.END
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
            warning_text = (
                f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! ‚ö†Ô∏è\n\n"
                f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å.\n"
                f"–¢–µ–∫—É—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {format_money(progress['earned'])}\n\n"
                f"–í—Å—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –æ—Å—Ç–∞–Ω–µ—Ç—Å—è, –Ω–æ —Å—á—ë—Ç—á–∏–∫ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –æ–±–Ω—É–ª—ë–Ω.\n"
                f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
            )
            
            keyboard = [
                [
                    InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='settings'),
                    InlineKeyboardButton("–î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data='reset_goal_confirm')
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                query.message.delete()
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                
            message = context.bot.send_message(
                chat_id=chat_id,
                text=warning_text,
                reply_markup=reply_markup
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            if message:
                context.user_data['last_bot_message'] = (message.chat_id, message.message_id)
                
            return RESET_GOAL_CONFIRM
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–±—Ä–æ—Å–∞ —Ü–µ–ª–∏: {e}")
            context.bot.send_message(
                chat_id=chat_id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            show_main_menu(update, context)
            return ConversationHandler.END
            
    elif data == 'reset_goal_confirm':
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = db.get_user_data(user_id)
            if not user_data:
                context.bot.send_message(
                    chat_id=chat_id,
                    text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
                )
                show_main_menu(update, context)
                return ConversationHandler.END
                
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
            def delete_user_time_records(user_id):
                """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
                try:
                    logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
                    conn = sqlite3.connect("time_tracker.db")
                    cursor = conn.cursor()
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    cursor.execute("DELETE FROM time_records WHERE user_id = ?", (user_id,))
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º earned –¥–æ 0
                    cursor.execute("UPDATE users SET earned = 0 WHERE user_id = ?", (user_id,))
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    conn.commit()
                    conn.close()
                    
                    logger.info(f"–£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    return True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏: {e}")
                    return False
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if delete_user_time_records(user_id):
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    query.message.delete()
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–æ–≤–æ–π —Ü–µ–ª–∏
                keyboard = [
                    [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –∑–∞—Ä–∞–±–æ—Ç–∫–∞", callback_data='change_goal')],
                    [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='main_menu')]
                ]
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                message = context.bot.send_message(
                    chat_id=chat_id,
                    text="‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã!\n"
                         "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –∏ —Å—á—ë—Ç—á–∏–∫ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω—ã.\n\n"
                         "–ñ–µ–ª–∞–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å –∑–∞—Ä–∞–±–æ—Ç–∫–∞?",
                    reply_markup=reply_markup
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                if message:
                    context.user_data['last_bot_message'] = (message.chat_id, message.message_id)
            else:
                context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                show_main_menu(update, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            context.bot.send_message(
                chat_id=chat_id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            show_main_menu(update, context)
            
        return ConversationHandler.END
    
    return ConversationHandler.END


def change_rate_input(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏"""
    user_id = update.effective_user.id
    user_text = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['state'] = CHANGE_RATE
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{user_text}'")
    
    try:
        # –û—á–∏—â–∞–µ–º –≤–≤–æ–¥ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        rate_text = user_text.replace('‚ÇΩ', '').replace('—Ä', '').replace('—Ä—É–±', '')
        rate_text = rate_text.replace(',', '.').strip()
        
        logger.info(f"–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞–≤–∫–∏: '{rate_text}'")
        
        rate = float(rate_text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {rate}")
        db.update_rate(user_id, rate)
        # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None
        # –Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞–≤–∫—É –∫–∞–∫ –≤–∏–¥–Ω–æ –∏–∑ –ª–æ–≥–æ–≤
        logger.info(f"–°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {rate}")
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            logger.info("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
            if hasattr(update, 'message') and update.message:
                update.message.delete()
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω–æ")
            
            if 'last_bot_message' in context.user_data:
                chat_id, message_id = context.user_data['last_bot_message']
                context.bot.delete_message(chat_id=chat_id, message_id=message_id)
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ {message_id} —É–¥–∞–ª–µ–Ω–æ")
                del context.user_data['last_bot_message']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        message = update.message.reply_text(f"‚úÖ –°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {rate:.0f}‚ÇΩ")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        context.job_queue.run_once(
            delete_message_later, 
            5, 
            context=(message.chat_id, message.message_id)
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if 'state' in context.user_data:
            del context.user_data['state']
            logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω–æ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        logger.info("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        show_main_menu(update, context)
        
        return ConversationHandler.END
    
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞–≤–∫–∏: {e}")
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 500 –∏–ª–∏ 500‚ÇΩ"
        )
        
        return CHANGE_RATE
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏: {e}")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        show_main_menu(update, context)
        return ConversationHandler.END


def change_goal_input(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ü–µ–ª–∏"""
    user_id = update.effective_user.id
    user_text = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['state'] = CHANGE_GOAL
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ü–µ–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{user_text}'")
    
    try:
        # –û—á–∏—â–∞–µ–º –≤–≤–æ–¥ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        goal_text = user_text.replace('‚ÇΩ', '').replace('—Ä', '').replace('—Ä—É–±', '')
        goal_text = goal_text.replace(',', '.').strip()
        
        logger.info(f"–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏: '{goal_text}'")
        
        goal = float(goal_text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {goal}")
        db.update_goal(user_id, goal)
        logger.info(f"–¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {goal}")
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            logger.info("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
            if hasattr(update, 'message') and update.message:
                update.message.delete()
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω–æ")
            
            if 'last_bot_message' in context.user_data:
                chat_id, message_id = context.user_data['last_bot_message']
                context.bot.delete_message(chat_id=chat_id, message_id=message_id)
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ {message_id} —É–¥–∞–ª–µ–Ω–æ")
                del context.user_data['last_bot_message']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        message = update.message.reply_text(f"‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {goal:.0f}‚ÇΩ")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        context.job_queue.run_once(
            delete_message_later, 
            5, 
            context=(message.chat_id, message.message_id)
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if 'state' in context.user_data:
            del context.user_data['state']
            logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω–æ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        logger.info("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        show_main_menu(update, context)
        
        return ConversationHandler.END
    
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ü–µ–ª–∏: {e}")
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ü–µ–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 50000 –∏–ª–∏ 50000‚ÇΩ"
        )
        
        return CHANGE_GOAL
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏: {e}")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        show_main_menu(update, context)
        return ConversationHandler.END


def manual_time_input(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = update.effective_user.id
    time_input = update.message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['state'] = CONFIRM_TIME
    
    # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
    minutes = parse_time_input(time_input)
    
    if minutes is None:
        send_message_with_auto_delete(
            update, context,
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
            "–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ 2—á 20–º\n"
            "‚Ä¢ 140–º–∏–Ω\n"
            "‚Ä¢ 2.33 (—á–∞—Å—ã)",
            delete_seconds=10
        )
        return CONFIRM_TIME
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = db.get_user_data(user_id)
    rate = user_data['rate']
    
    # –†–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞
    earnings = (minutes / 60) * rate
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.add_time_record(user_id, minutes)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        update.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º
    send_message_with_auto_delete(
        update, context,
        f"‚úÖ\n–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ: {format_time(minutes)}\n"
        f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_money(earnings)}",
        delete_seconds=5
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    show_main_menu(update, context)
    
    return ConversationHandler.END


def rate_command(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rate"""
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ—á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É:"
    )
    
    return CHANGE_RATE


def goal_command(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /goal"""
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å –∑–∞—Ä–∞–±–æ—Ç–∫–∞:"
    )
    
    return CHANGE_GOAL


def notify_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /notify"""
    user_id = update.effective_user.id
    
    if not context.args:
        update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /notify [hour/day/week/off]"
        )
        return
    
    freq = context.args[0].lower()
    
    if freq not in ['hour', 'day', 'week', 'off']:
        update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —á–∞—Å—Ç–æ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: hour, day, week –∏–ª–∏ off."
        )
        return
    
    if freq == 'off':
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for job in scheduler.get_jobs():
            if job.id == f"notify_{user_id}":
                job.remove()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.update_notify_freq(user_id, 'off')
        
        update.message.reply_text(
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã."
        )
    else:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
        setup_notification(context, user_id, freq)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.update_notify_freq(user_id, freq)
        
        freq_text = {
            'hour': '–µ–∂–µ—á–∞—Å–Ω–æ',
            'day': '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ',
            'week': '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'
        }.get(freq, freq)
        
        update.message.reply_text(
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ {freq_text}."
        )


def help_command(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    update.message.reply_text(
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n"
        "/rate - –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É\n"
        "/goal - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å\n"
        "/notify [hour/day/week/off] - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )


def cancel_command(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    show_main_menu(update, context)
    
    return ConversationHandler.END


def error_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    try:
        logger.error(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update} –≤—ã–∑–≤–∞–ª–æ –æ—à–∏–±–∫—É {context.error}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if update and hasattr(update, 'effective_chat') and update.effective_chat:
            text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=text
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")


def process_timer_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–∞–π–º–µ—Ä–æ–º"""
    message_text = update.message.text
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–≤–æ–¥–∞
    if context.user_data.get('state') in [CHANGE_RATE, CHANGE_GOAL, RATE, GOAL, CONFIRM_TIME]:
        state = context.user_data.get('state')
        logger.info(f"–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {state}")
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        try:
            if state == CHANGE_RATE:
                return change_rate_input(update, context)
            elif state == CHANGE_GOAL:
                return change_goal_input(update, context)
            elif state == RATE:
                return rate_input(update, context)
            elif state == GOAL:
                return goal_input(update, context)
            elif state == CONFIRM_TIME:
                return manual_time_input(update, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {state}: {e}")
        
        # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–∞–π–º–µ—Ä–∞
        logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —Ç–∞–π–º–µ—Ä–∞, —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–≤–æ–¥–∞: {state}")
        return
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º —Ç–∞–π–º–µ—Ä–æ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{message_text}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç –æ —Ç–∞–π–º–µ—Ä–µ
    if "—Ç–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" in message_text.lower() and "–∑–∞—Ç—Ä–∞—á–µ–Ω–æ" in message_text.lower():
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        minutes = parse_timer_message(message_text)
        
        if minutes:
            logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤—Ä–µ–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞: {minutes} –º–∏–Ω—É—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if not db.user_exists(user_id):
                try:
                    update.message.reply_text(
                        "–î–ª—è —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∞–≤–∫—É –∏ —Ü–µ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±—É—Ñ–µ—Ä–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            if 'timer_buffer' not in context.user_data:
                context.user_data['timer_buffer'] = []
                context.user_data['forwarded_messages'] = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –±—É—Ñ–µ—Ä
            context.user_data['timer_buffer'].append(minutes)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö
            try:
                if update.message.forward_date:
                    # –≠—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    context.user_data['forwarded_messages'].append(update.message.message_id)
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º: {minutes} –º–∏–Ω—É—Ç")
                    
                    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≥—Ä—É–ø–ø—ã —Ç–∞–π–º–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if 'timer_group_job' in context.user_data:
                        context.user_data['timer_group_job'].schedule_removal()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ø–∏—é –±—É—Ñ–µ—Ä–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∑–∞–¥–∞—á—É
                    timer_buffer = context.user_data['timer_buffer'].copy()
                    
                    context.user_data['timer_group_job'] = context.job_queue.run_once(
                        process_grouped_timers, 
                        2, 
                        context=(user_id, update.message.chat_id, timer_buffer)
                    )
                    
                    # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∑–∞–¥–∞—á—É
                    context.user_data['timer_buffer'] = []
                    context.user_data['forwarded_messages'] = []
                else:
                    # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
                    process_single_timer(update, context, minutes)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–µ—Ä–æ–º: {e}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ç–∞–π–º–µ—Ä
                process_single_timer(update, context, minutes)


def process_grouped_timers(context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
        user_id, chat_id, timer_buffer = context.job.context
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if not timer_buffer:
            logger.info(f"–ë—É—Ñ–µ—Ä —Ç–∞–π–º–µ—Ä–æ–≤ –ø—É—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∞–π–º–µ—Ä, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω—ã–π
        if len(timer_buffer) == 1:
            # –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ-–∞–ø–¥–µ–π—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            class PseudoUpdate:
                def __init__(self, user_id, chat_id):
                    self.effective_user = type('obj', (object,), {'id': user_id})
                    self.message = type('obj', (object,), {'chat_id': chat_id, 'reply_text': lambda text, **kwargs: None})
                    
            pseudo_update = PseudoUpdate(user_id, chat_id)
            process_single_timer(pseudo_update, context, timer_buffer[0])
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = db.get_user_data(user_id)
        if not user_data:
            context.bot.send_message(
                chat_id=chat_id,
                text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )
            return
                
        rate = user_data['rate']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ –≥—Ä—É–ø–ø–µ —Ç–∞–π–º–µ—Ä–æ–≤
        total_minutes = sum(timer_buffer)
        total_earnings = (total_minutes / 60) * rate
        
        message_text = "–Ø –æ–±–Ω–∞—Ä—É–∂–∏–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–∞–π–º–µ—Ä–∞–º–∏:\n\n"
        
        for i, minutes in enumerate(timer_buffer):
            earnings = (minutes / 60) * rate
            message_text += f"{i+1}) {format_time(minutes)} ({format_money(earnings)})\n"
        
        message_text += f"\n–ò—Ç–æ–≥–æ: {format_time(total_minutes)} ({format_money(total_earnings)})"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤—Å—ë", callback_data=f'timer_group_confirm_{total_minutes}'),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='timer_cancel')
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        message = context.bot.send_message(
            chat_id=chat_id,
            text=message_text,
            reply_markup=reply_markup
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        if message and hasattr(context, 'user_data') and context.user_data is not None:
            context.user_data['last_bot_message'] = (message.chat_id, message.message_id)
            context.user_data['timer_group_minutes'] = total_minutes
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã —Ç–∞–π–º–µ—Ä–æ–≤, ID: {message.message_id}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã —Ç–∞–π–º–µ—Ä–æ–≤: {e}")
        try:
            if chat_id:
                context.bot.send_message(
                    chat_id=chat_id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–π–º–µ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        except:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")


def process_single_timer(update, context, minutes):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞"""
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = db.get_user_data(user_id)
        rate = user_data['rate']
        
        # –†–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞
        earnings = (minutes / 60) * rate
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("–î–∞, –¥–æ–±–∞–≤–∏—Ç—å", callback_data=f'timer_confirm_{minutes}'),
                InlineKeyboardButton("–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data='timer_cancel')
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–æ–≤
            original_msg = getattr(update.message, 'text', '')[:100]
            original_msg = original_msg + "..." if len(original_msg) > 100 else original_msg
            
            if hasattr(update.message, 'delete'):
                update.message.delete()
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º: '{original_msg}'")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        message = None
        try:
            if hasattr(update.message, 'reply_text'):
                message = update.message.reply_text(
                    f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—Ä–µ–º—è: {format_time(minutes)}\n"
                    f"–ó–∞—Ä–∞–±–æ—Ç–æ–∫: {format_money(earnings)}\n\n"
                    f"–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –≤—Ä–µ–º—è –≤ —É—á–µ—Ç?",
                    reply_markup=reply_markup
                )
            else:
                # –î–ª—è –ø—Å–µ–≤–¥–æ-–∞–ø–¥–µ–π—Ç–∞
                message = context.bot.send_message(
                    chat_id=update.message.chat_id,
                    text=f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—Ä–µ–º—è: {format_time(minutes)}\n"
                    f"–ó–∞—Ä–∞–±–æ—Ç–æ–∫: {format_money(earnings)}\n\n"
                    f"–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –≤—Ä–µ–º—è –≤ —É—á–µ—Ç?",
                    reply_markup=reply_markup
                )
            
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            if message:
                context.user_data['last_bot_message'] = (message.chat_id, message.message_id)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º, ID: {message.message_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω—É—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        context.user_data['timer_minutes'] = minutes
        
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–π–º–µ—Ä–∞: {e}")
        try:
            if hasattr(update.message, 'reply_text'):
                update.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–π–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        except:
            pass


def delete_message_later(context: CallbackContext):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è"""
    chat_id, message_id = context.job.context
    try:
        context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def send_message_with_auto_delete(update, context, text, reply_markup=None, delete_seconds=60):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–≥–æ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ"""
    message = None
    try:
        if update.callback_query:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                message = update.callback_query.edit_message_text(
                    text=text, reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                message = update.callback_query.message.reply_text(
                    text=text, reply_markup=reply_markup
                )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = update.message.reply_text(
                text=text, reply_markup=reply_markup
            )
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if delete_seconds > 0 and message:
            context.job_queue.run_once(
                delete_message_later, 
                delete_seconds, 
                context=(message.chat_id, message.message_id)
            )
        
        return message
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_message_with_auto_delete: {e}")
        return None


def delete_message_if_exists(update, context):
    """–ü—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    if hasattr(update, 'message') and update.message:
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update.message.delete()
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    if 'last_bot_message' in context.user_data:
        try:
            chat_id, message_id = context.user_data['last_bot_message']
            context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
            # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if 'last_bot_message' in context.user_data:
                del context.user_data['last_bot_message']


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª–∞
    token = os.environ.get("TELEGRAM_TOKEN")
    
    if not token:
        logging.error("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞. –£–∫–∞–∂–∏—Ç–µ TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return
    
    # –°–æ–∑–¥–∞–µ–º Updater
    updater = Updater(token)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dispatcher = updater.dispatcher
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    dispatcher.add_error_handler(error_handler)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CommandHandler("rate", rate_command),
            CommandHandler("goal", goal_command)
        ],
        states={
            RATE: [MessageHandler(Filters.text & ~Filters.command, rate_input)],
            GOAL: [MessageHandler(Filters.text & ~Filters.command, goal_input)],
            ADD_TIME: [CallbackQueryHandler(button_callback)],
            CONFIRM_TIME: [
                CallbackQueryHandler(button_callback),
                MessageHandler(Filters.text & ~Filters.command, manual_time_input)
            ],
            CHANGE_RATE: [
                CallbackQueryHandler(button_callback),
                MessageHandler(Filters.text & ~Filters.command, change_rate_input)
            ],
            CHANGE_GOAL: [
                CallbackQueryHandler(button_callback),
                MessageHandler(Filters.text & ~Filters.command, change_goal_input)
            ],
            RESET_GOAL_CONFIRM: [CallbackQueryHandler(button_callback)],
        },
        fallbacks=[
            CommandHandler("start", start),
            CommandHandler("help", help_command),
            CommandHandler("cancel", cancel_command)
        ],
        allow_reentry=True
    )
    
    # –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ConversationHandler, –∑–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    dispatcher.add_handler(CallbackQueryHandler(button_callback))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("notify", notify_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–∞–π–º–µ—Ä–æ–º (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    # –ù–ï –ò–ó–ú–ï–ù–Ø–ï–ú –ü–û–†–Ø–î–û–ö - —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º!
    dispatcher.add_handler(MessageHandler(
        (Filters.text | Filters.forwarded) & ~Filters.command & ~Filters.update.edited_message,
        process_timer_message
    ))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
    
    updater.idle()


if __name__ == "__main__":
    main() 