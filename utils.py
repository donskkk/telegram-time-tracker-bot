import re
import io
import os
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Agg –±—ç–∫–µ–Ω–¥, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏–π GUI


def parse_time_input(time_input):
    """–ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "2—á 20–º" –∏–ª–∏ "2—á" –∏–ª–∏ "20–º"
    if re.search(r'(\d+)—á', time_input) or re.search(r'(\d+)–º', time_input):
        hours = re.search(r'(\d+)—á', time_input)
        minutes = re.search(r'(\d+)–º', time_input)
        
        total_minutes = 0
        if hours:
            total_minutes += int(hours.group(1)) * 60
        if minutes:
            total_minutes += int(minutes.group(1))
        
        return total_minutes
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "140–º–∏–Ω"
    if re.search(r'(\d+)–º–∏–Ω', time_input):
        minutes = re.search(r'(\d+)–º–∏–Ω', time_input)
        return int(minutes.group(1))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π (—á–∞—Å—ã)
    if re.match(r'^(\d+(\.\d+)?)$', time_input):
        hours = float(time_input)
        return int(hours * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –º–∏–Ω—É—Ç—ã)
    if time_input.isdigit():
        return int(time_input)
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    return None


def parse_timer_message(message_text):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ç–∞–π–º–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "üõë —Ç–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ... –ó–∞—Ç—Ä–∞—á–µ–Ω–æ HH:MM:SS" """
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS
    time_pattern = r'–ó–∞—Ç—Ä–∞—á–µ–Ω–æ\s+(\d{2}):(\d{2}):(\d{2})'
    
    match = re.search(time_pattern, message_text)
    if match:
        hours = int(match.group(1))
        minutes = int(match.group(2))
        seconds = int(match.group(3))
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å—ë –≤ –º–∏–Ω—É—Ç—ã, –æ–∫—Ä—É–≥–ª—è—è —Å–µ–∫—É–Ω–¥—ã –¥–æ –±–ª–∏–∂–∞–π—à–µ–π –º–∏–Ω—É—Ç—ã
        total_minutes = hours * 60 + minutes
        if seconds >= 30:
            total_minutes += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –∑–∞ —Ä–∞–∑)
        if 0 < total_minutes <= 24 * 60:
            return total_minutes
        else:
            return None
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω (–ø—Ä–æ—Å—Ç–æ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS –≥–¥–µ-–Ω–∏–±—É–¥—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏)
    alt_pattern = r'(\d{2}):(\d{2}):(\d{2})'
    
    for match in re.finditer(alt_pattern, message_text):
        hours = int(match.group(1))
        minutes = int(match.group(2))
        seconds = int(match.group(3))
        
        # –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if 0 <= hours < 24 and 0 <= minutes < 60 and 0 <= seconds < 60:
            total_minutes = hours * 60 + minutes
            if seconds >= 30:
                total_minutes += 1
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –∑–∞ —Ä–∞–∑)
            if 0 < total_minutes <= 24 * 60:
                return total_minutes
    
    return None


def generate_progress_bar(percent):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ASCII-–ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    full_char = '‚óè'
    empty_char = '‚óã'
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–∏–∑ 10)
    filled = int(percent / 10)
    
    # –°–æ–∑–¥–∞–µ–º –±–∞—Ä
    bar = full_char * filled + empty_char * (10 - filled)
    
    return f"[{bar}] {percent}%"


def create_progress_chart(progress_data):
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç–æ–≤—ã–π –±—É—Ñ–µ—Ä —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    earned = progress_data["earned"]
    goal = progress_data["goal"]
    percent = progress_data["percent"]
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
    remaining = goal - earned if goal > earned else 0
    sizes = [earned, remaining]
    labels = [f'–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {earned:.0f}‚ÇΩ', f'–û—Å—Ç–∞–ª–æ—Å—å: {remaining:.0f}‚ÇΩ']
    colors = ['#4CAF50', '#ECEFF1']
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
    plt.figure(figsize=(10, 6))
    plt.clf()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    plt.rcParams['font.family'] = 'DejaVu Sans'
    
    # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
    wedges, texts, autotexts = plt.pie(
        sizes, 
        labels=labels, 
        colors=colors, 
        autopct='%1.1f%%', 
        startangle=90,
        wedgeprops={'linewidth': 3, 'edgecolor': 'white'}
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞
    for text in texts + autotexts:
        text.set_fontsize(12)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    plt.title(
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {percent}% –æ—Ç —Ü–µ–ª–∏ –≤ {goal:.0f}‚ÇΩ\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å: {progress_data['hours_left']:.1f} —á–∞—Å–æ–≤",
        fontsize=16, 
        pad=20
    )
    
    plt.axis('equal')  # –ö—Ä—É–≥–ª–∞—è —Ñ–æ—Ä–º–∞
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=100, bbox_inches='tight')
    buf.seek(0)
    
    return buf


def format_time(minutes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
    if minutes < 60:
        return f"{minutes}–º"
    
    hours = minutes // 60
    mins = minutes % 60
    
    if mins == 0:
        return f"{hours}—á"
    
    return f"{hours}—á {mins}–º"


def format_money(amount):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω–æ–π —Å—É–º–º—ã"""
    return f"{amount:.0f}‚ÇΩ"


def format_progress_message(progress_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
    goal = format_money(progress_data["goal"])
    earned = format_money(progress_data["earned"])
    percent = progress_data["percent"]
    hours_left = progress_data["hours_left"]
    
    progress_bar = generate_progress_bar(percent)
    
    message = (
        f"–¶–µ–ª—å: {goal} | –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {earned}\n"
        f"{progress_bar}\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å: {hours_left:.1f} —á–∞—Å–æ–≤"
    )
    
    return message


def format_notification_message(progress_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    earned = format_money(progress_data["earned"])
    hours_left = progress_data["hours_left"]
    
    message = (
        f"üì¢\n"
        f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {earned} | –û—Å—Ç–∞–ª–æ—Å—å: {hours_left:.1f} —á"
    )
    
    return message


def format_time_record(record):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"""
    minutes = record["minutes"]
    earnings = format_money(record["earnings"])
    timestamp = datetime.strptime(record["timestamp"], "%Y-%m-%d %H:%M:%S")
    date_str = timestamp.strftime("%d.%m.%Y %H:%M")
    
    return f"{date_str} - {format_time(minutes)} ({earnings})" 